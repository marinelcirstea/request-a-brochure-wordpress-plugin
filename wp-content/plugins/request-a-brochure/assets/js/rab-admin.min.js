document.addEventListener("DOMContentLoaded",()=>{rab_listenForBrochureCreation(),rab_generate()});const brochuresUrl=`${SERVER_DATA.rest_url}/brochures`,rab_deleteBrochure=async(_this,id)=>{const parent=_this.parentNode.parentNode;parent.style.opacity="0.4",parent.style.pointerEvents="none";const success=await rab_captain.delete(`${SERVER_DATA.rest_url}/brochures/${id}`);if(!success)return parent.style.opacity="1",void(parent.style.pointerEvents="auto");parent.remove()},rab_changeBrochureStatus=async(_this,id,status)=>{const parent=_this.parentNode.parentNode;parent.style.opacity="0.4",parent.style.pointerEvents="none";const success=await rab_captain.put(`${SERVER_DATA.rest_url}/brochures/${id}`,JSON.stringify({active:status?0:1}));success&&rab_generate(),parent.style.opacity="1",parent.style.pointerEvents="auto"},rab_generate=async()=>{const data=await rab_captain.get(brochuresUrl);if(!Array.isArray(data)||!data[0])return document.querySelector(".rab-spinner").innerHTML="<h3>No brochures found.</h3>";rab_TbodyGenerator(data)},rab_TbodyGenerator=brochures=>{const tbody=document.getElementById("rab-brochures-tbody");let htmldata="";for(const brochure of brochures)htmldata+=`\n    <tr>\n        <td>${brochure.brochure}</td>\n        <td>${parseInt(brochure.active)?"ACTIVE":"INACTIVE"}</td>\n        <td>\n            <button \n            onclick="rab_deleteBrochure(this, ${brochure.id})" \n            id="rab-delete-button" \n            class="button button-secondary">\n                DELETE\n            </button>\n            <button \n            onclick="rab_changeBrochureStatus(this, ${brochure.id}, ${parseInt(brochure.active)})"\n            class="button button-secondary">\n              CHANGE STATUS\n            </button>\n        </td>\n    </tr>\n    `;tbody.innerHTML=htmldata};function rab_listenForBrochureCreation(){const rabFormCreateBrochure=document.getElementById("rab-form-create-brochure");rabFormCreateBrochure.addEventListener("submit",async e=>{e.preventDefault();const brochure=rabFormCreateBrochure.querySelector("input"),button=rabFormCreateBrochure.querySelector("button"),initialText=button.innerHTML;button.innerHTML="Creating...",button.disabled=!0;const res=await rab_captain.post(brochuresUrl,JSON.stringify({brochure:brochure.value}));brochure.value="",button.innerHTML=initialText,button.disabled=!1,res&&rab_generate()})}const rab_captain={get:async url=>await rab_fetcher(url,"GET"),post:async(url,body)=>await rab_fetcher(url,"POST",body),put:async(url,body)=>await rab_fetcher(url,"PUT",body),delete:async url=>await rab_fetcher(url,"DELETE")},rab_fetcher=async(url,method,body={})=>{console.log({url:url,method:method,body:body});const options={method:method,headers:{"Content-Type":"application/json",Accepts:"application/json"}};"POST"!==method&&"PUT"!==method||(options.body=JSON.stringify(body));const res=await fetch(url,options);console.log("content-type:",res.headers.get("content-type"));const data=await res.json();return console.log({data:data}),!!res.ok&&data};